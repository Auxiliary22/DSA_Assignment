#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

Node* head = NULL;
void insertAtBeginning(int val) {
    Node* newNode = new Node{val, head};
    head = newNode;
}

void insertAtEnd(int val) {
    Node* newNode = new Node{val, NULL};
    if (!head) {
        head = newNode;
        return;
    }
    Node* temp = head;
    while (temp->next) temp = temp->next;
    temp->next = newNode;
}
void insertBefore(int key, int val) {
    if (!head) return;
    if (head->data == key) {
        insertAtBeginning(val);
        return;
    }
    Node* temp = head;
    while (temp->next && temp->next->data != key) temp = temp->next;
    if (temp->next) {
        Node* newNode = new Node{val, temp->next};
        temp->next = newNode;
    }
}
void insertAfter(int key, int val) {
    Node* temp = head;
    while (temp && temp->data != key) temp = temp->next;
    if (temp) {
        Node* newNode = new Node{val, temp->next};
        temp->next = newNode;
    }
}
void deleteFromBeginning() {
    if (!head) return;
    Node* temp = head;
    head = head->next;
    delete temp;
}
void deleteFromEnd() {
    if (!head) return;
    if (!head->next) {
        delete head;
        head = NULL;
        return;
    }
    Node* temp = head;
    while (temp->next->next) temp = temp->next;
    delete temp->next;
    temp->next = NULL;
}
void deleteNode(int key) {
    if (!head) return;
    if (head->data == key) {
        deleteFromBeginning();
        return;
    }
    Node* temp = head;
    while (temp->next && temp->next->data != key) temp = temp->next;
    if (temp->next) {
        Node* delNode = temp->next;
        temp->next = temp->next->next;
        delete delNode;
    }
}
void searchNode(int key) {
    Node* temp = head;
    int pos = 1;
    while (temp) {
        if (temp->data == key) {
            cout << "Found at position " << pos << endl;
            return;
        }
        temp = temp->next;
        pos++;
    }
    cout << "Not found!" << endl;
}
void display() {
    Node* temp = head;
    while (temp) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL\n";
}

int main() {
    int choice, val, key;
    while (true) {
        cout << "\nMenu:\n1.Insert at beginning\n2.Insert at end\n3.Insert before\n4.Insert after\n5.Delete from beginning\n6.Delete from end\n7.Delete specific\n8.Search\n9.Display\n10.Exit\nEnter choice: ";
        cin >> choice;
        switch (choice) {
            case 1: cout << "Enter value: "; cin >> val; insertAtBeginning(val); break;
            case 2: cout << "Enter value: "; cin >> val; insertAtEnd(val); break;
            case 3: cout << "Enter key and value: "; cin >> key >> val; insertBefore(key, val); break;
            case 4: cout << "Enter key and value: "; cin >> key >> val; insertAfter(key, val); break;
            case 5: deleteFromBeginning(); break;
            case 6: deleteFromEnd(); break;
            case 7: cout << "Enter key: "; cin >> key; deleteNode(key); break;
            case 8: cout << "Enter key: "; cin >> key; searchNode(key); break;
            case 9: display(); break;
            case 10: return 0;
            default: cout << "Invalid choice!\n";
        }
    }
}